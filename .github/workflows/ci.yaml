name: CI - build, scan, push (GHCR) + helm lint

on:
  push:
    branches: [ main ]
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # owner/repo
  # Image tags: commit SHA + branch tag
  TAG_SHA: ${{ github.sha }}
  TAG_REF: ${{ github.ref_name }}

jobs:
  build-scan-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write    # needed to push to GHCR
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta (labels + tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.TAG_SHA }}
            type=ref,event=branch
            type=raw,value=dev

      # ---------- INSERT: build cache + "no push on PRs" ----------
      - name: Build and push
        id: build
        if: github.event_name != 'pull_request' # do not push images for PRs from forks
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # ---------- END INSERT ----------

      # When event is a PR, still build (no push) to validate Dockerfile works
      - name: Build (PR validation, no push)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy FS scan (repo)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-fs.sarif

      - name: Trivy image scan
        # Only scan the pushed image when we actually pushed it (non-PR)
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_SHA }}
          ignore-unfixed: true
          format: sarif
          output: trivy-image.sarif

      # ---------- INSERT: upload BOTH SARIFs ----------
      - name: Upload Trivy FS results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      - name: Upload Trivy image results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      # ---------- END INSERT ----------

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.3

      - name: Helm lint
        run: helm lint ./helm/url-shortener

      # ---------- INSERT: render manifests with the CI image/tag ----------
      - name: Helm template (render check with CI tag)
        run: |
          helm template ci ./helm/url-shortener \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ env.TAG_SHA }}
      # ---------- END INSERT ----------

      - name: Summary
        run: |
          echo "Pushed image (SHA): ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_SHA }}" >> $GITHUB_STEP_SUMMARY
          echo "Pushed image (branch): ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_REF }}" >> $GITHUB_STEP_SUMMARY
          echo "Pushed image (dev): ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev" >> $GITHUB_STEP_SUMMARY
